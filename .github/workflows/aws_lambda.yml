name: AWS Lambda Deploy

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch: # for manual trigger

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      ECR_IMAGE_TAG: latest
      AWS_DEFAULT_REGION: eu-north-1

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials for IAM user
        uses: aws-actions/configure-aws-credentials@v1
        with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ env.AWS_DEFAULT_REGION }}
      - name: Login to AWS ECR
        id: login-ecr # step's id
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, push image to AWS ECR
        id: build-image # step's id
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: aws-lambda-testing-repository
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to AWS lambda.
          docker build \
              --build-arg WEATHER_API_KEY="${{ secrets.WEATHER_API_KEY }}" \
              --build-arg AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
              --build-arg AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
              --build-arg AWS_DEFAULT_REGION="${{ env.AWS_DEFAULT_REGION }}" \
              --build-arg EMAIL_USER="${{ secrets.EMAIL_USER }}" \
              --build-arg EMAIL_PASSWORD="${{ secrets.EMAIL_PASSWORD }}" \
              -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.ECR_IMAGE_TAG }} .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.ECR_IMAGE_TAG }}
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:${{ env.ECR_IMAGE_TAG }}"
      - name: Deploy to AWS Lambda
        run: |
          aws lambda update-function-code \
          --function-name ${{ env.AWS_LAMBDA_FUNC_NAME }} \
          --image-uri "${{ secrets.AWS_ECR_IMAGE_URI }}:${{ env.ECR_IMAGE_TAG }}"
        env:
          AWS_LAMBDA_FUNC_NAME: aws-lambda-training-weather-function
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ env.AWS_DEFAULT_REGION }}
